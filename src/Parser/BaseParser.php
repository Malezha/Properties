<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Serafim\Properties\Parser;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;
use Railt\Parser\GrammarInterface;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class BaseParser has been auto-generated.
 * Generated at: 13-10-2018 15:06:23
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class BaseParser extends Stateful
{
    public const T_DOC_DEFINITION = 'T_DOC_DEFINITION';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_WORD = 'T_WORD';
    public const T_SUFFIX_ARRAY = 'T_SUFFIX_ARRAY';
    public const T_NAMESPACE = 'T_NAMESPACE';
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_COMMENT = 'T_COMMENT';
    public const T_ANY = 'T_ANY';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_DOC_DEFINITION => '@([\\w\\-]+)',
        self::T_VARIABLE => '\\$([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)',
        self::T_WORD => '[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*',
        self::T_SUFFIX_ARRAY => '\\[\\]',
        self::T_NAMESPACE => '\\\\',
        self::T_AND => '&',
        self::T_OR => '\\|',
        self::T_WHITESPACE => '\\s+',
        self::T_COMMENT => '\\*',
        self::T_ANY => '\\S+?',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_WHITESPACE',
        'T_COMMENT',
        'T_ANY',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Concatenation(0, ['DocBlock'], 'Document'), 
            new Concatenation(1, ['Any'], 'Document'), 
            new Alternation(2, [0, 1], null), 
            (new Repetition('Document', 0, -1, 2, null))->setDefaultId('Document'), 
            new Terminal(4, 'T_WORD', false), 
            new Terminal(5, 'T_DOC_DEFINITION', false), 
            new Terminal(6, 'T_VARIABLE', false), 
            new Terminal(7, 'T_SUFFIX_ARRAY', false), 
            new Terminal(8, 'T_NAMESPACE', false), 
            new Terminal(9, 'T_AND', false), 
            new Terminal(10, 'T_OR', false), 
            new Alternation('Any', [4, 5, 6, 7, 8, 9, 10], null), 
            new Concatenation(12, ['DocBlockVariable'], null), 
            (new Concatenation('DocBlock', ['DocBlockTitle', 'TypeHint', 12], 'DocBlock'))->setDefaultId('DocBlock'), 
            new Terminal(14, 'T_DOC_DEFINITION', true), 
            (new Concatenation('DocBlockTitle', [14], 'DocBlockTitle'))->setDefaultId('DocBlockTitle'), 
            new Terminal(16, 'T_VARIABLE', true), 
            (new Concatenation('DocBlockVariable', [16], 'DocBlockVariable'))->setDefaultId('DocBlockVariable'), 
            new Repetition(18, 0, 1, 'TypeHintContinuation', null), 
            (new Concatenation('TypeHint', ['TypeHintDefinition', 18], 'TypeHint'))->setDefaultId('TypeHint'), 
            new Concatenation(20, ['TypeHintDefinitionOr'], null), 
            new Alternation('TypeHintContinuation', ['TypeHintDefinitionAnd', 20], null), 
            new Terminal(22, 'T_OR', false), 
            new Concatenation('TypeHintDefinitionOr', [22, 'TypeHint'], 'Or'), 
            new Terminal(24, 'T_AND', false), 
            new Concatenation('TypeHintDefinitionAnd', [24, 'TypeHint'], 'And'), 
            new Concatenation(26, ['ScalarTypeHint'], null), 
            new Alternation('TypeHintDefinition', ['ArrayTypeHint', 26], null), 
            new Terminal(28, 'T_SUFFIX_ARRAY', false), 
            new Concatenation('ArrayTypeHint', ['TypeDefinition', 28], 'Array'), 
            new Concatenation('ScalarTypeHint', ['TypeDefinition'], 'Scalar'), 
            new Terminal(31, 'T_NAMESPACE', false), 
            new Repetition(32, 0, 1, 31, null), 
            new Terminal(33, 'T_WORD', true), 
            new Terminal(34, 'T_NAMESPACE', false), 
            new Terminal(35, 'T_WORD', true), 
            new Concatenation(36, [34, 35], null), 
            new Repetition(37, 0, -1, 36, null), 
            new Concatenation('TypeDefinition', [32, 33, 37], 'Type')
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
