
%token T_DOC_DEFINITION     @([\w\-]+)
%token T_VARIABLE           \$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)
%token T_WORD               [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*
%token T_SUFFIX_ARRAY       \[\]
%token T_NAMESPACE          \\
%token T_AND                &
%token T_OR                 \|
%token T_ANGLE_LEFT         <
%token T_ANGLE_RIGHT        >
%token T_COMMA              ,

%skip T_WHITESPACE          \s+
%skip T_COMMENT             \*
%skip T_ANY                 \S+?


#Document
  : (DocBlock() | __any())*
  ;

__any
  : ::T_WORD::
  | ::T_DOC_DEFINITION::
  | ::T_VARIABLE::
  | ::T_SUFFIX_ARRAY::
  | ::T_NAMESPACE::
  | ::T_AND::
  | ::T_OR::
  | ::T_ANGLE_LEFT::
  | ::T_ANGLE_RIGHT::
  | ::T_COMMA::
  ;


#DocBlock
  : DocBlockTitle()
    TypeHint()?
    DocBlockVariable()
  ;

#DocBlockTitle
  : <T_DOC_DEFINITION>
  ;

#DocBlockVariable
  : <T_VARIABLE>
  ;

#TypeHint
  : (__arrayTypeHint() | __genericTypeHint() | __scalarTypeHint())
    __typeHintContinuation()?
  ;


__typeHintContinuation
  : __typeHintConjunction()
  | __typeHintDisjunction()
  ;

__typeHintDisjunction
  : ::T_OR:: TypeHint()
    #Disjunction
  ;

__typeHintConjunction
  : ::T_AND:: TypeHint()
    #Conjunction
  ;

__arrayTypeHint
  : __typeDefinition() ::T_SUFFIX_ARRAY::
    #Array
  ;

__genericTypeHint
  : __typeDefinition() ::T_ANGLE_LEFT:: __genericArguments()? ::T_ANGLE_RIGHT::
    #Generic
  ;

__genericArguments
  : __scalarTypeHint() (::T_COMMA:: __scalarTypeHint())?
    #GenericArguments
  ;

__scalarTypeHint
  : __typeDefinition()
    #Scalar
  ;

__typeDefinition
  : ::T_NAMESPACE::? <T_WORD> (::T_NAMESPACE:: <T_WORD>)*
    #Type
  ;
